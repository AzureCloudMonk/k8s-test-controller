/*

MIT License

Copyright (c) 2017 Sean Ross-Ross

See License in the root of this repo.

*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	tester_v1alpha1 "github.com/srossross/k8s-test-controller/pkg/apis/tester/v1alpha1"
	client "github.com/srossross/k8s-test-controller/pkg/client"
	internalinterfaces "github.com/srossross/k8s-test-controller/pkg/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/srossross/k8s-test-controller/pkg/listers/srossross/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// TestTemplateInformer provides access to a shared informer and lister for
// TestTemplates.
type TestTemplateInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.TestTemplateLister
}

type testTemplateInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

func newTestTemplateInformer(client client.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	sharedIndexInformer := cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				return client.SrossrossV1alpha1().TestTemplates(v1.NamespaceAll).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				return client.SrossrossV1alpha1().TestTemplates(v1.NamespaceAll).Watch(options)
			},
		},
		&tester_v1alpha1.TestTemplate{},
		resyncPeriod,
		cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
	)

	return sharedIndexInformer
}

func (f *testTemplateInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&tester_v1alpha1.TestTemplate{}, newTestTemplateInformer)
}

func (f *testTemplateInformer) Lister() v1alpha1.TestTemplateLister {
	return v1alpha1.NewTestTemplateLister(f.Informer().GetIndexer())
}
