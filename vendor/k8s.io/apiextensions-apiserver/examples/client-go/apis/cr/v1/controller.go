/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
  "time"
  "fmt"
  "github.com/golang/glog"

  "k8s.io/client-go/kubernetes"
  "k8s.io/client-go/tools/cache"
  "k8s.io/client-go/util/workqueue"
  "k8s.io/client-go/rest"
  "k8s.io/apimachinery/pkg/runtime"
  scheme "k8s.io/client-go/kubernetes/scheme"
	"k8s.io/apimachinery/pkg/util/wait"
	"k8s.io/apimachinery/pkg/watch"

  meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type E2ETestController struct {
	client     kubernetes.Interface
  restClient rest.RESTClient
	e2eTestLister  E2ETestRunnerLister
	informer   cache.Controller
	queue      workqueue.RateLimitingInterface
}


func NewE2ETestController(client kubernetes.Interface, restClient rest.RESTClient) *E2ETestController {
	controller := &E2ETestController{
		client: client,
    restClient: restClient,
		queue:  workqueue.NewRateLimitingQueue(workqueue.DefaultControllerRateLimiter()),
	}

	indexer, informer := cache.NewIndexerInformer(
		&cache.ListWatch{
			ListFunc: func(lo meta_v1.ListOptions) (runtime.Object, error) {
				// We do not add any selectors because we want to watch all nodes.
				// This is so we can determine the total count of "unavailable" nodes.
				// However, this could also be implemented using multiple informers (or better, shared-informers)
				// return client.Core().Nodes().List(lo)
        // err = restClient.List().
      	// 	Resource(E2ETestResourcePlural).
      	// 	Namespace(apiv1.NamespaceDefault).
      	// 	Body(example).
      	// 	Do().Into(&result)
        glog.Info("ListFunc")
        result := &E2ETestRunnerList{}
      	err := restClient.Get().
      		Resource(E2ETestResourcePlural).
      		VersionedParams(&lo, scheme.ParameterCodec).
      		Do().
      		Into(result)
        return result, err
			},
			WatchFunc: func(lo meta_v1.ListOptions) (watch.Interface, error) {
				// return client.Core().Nodes().Watch(lo)
        glog.Info("WatchFunc")
        lo.Watch = true
      	return restClient.Get().
      		Resource(E2ETestResourcePlural).
      		VersionedParams(&lo, scheme.ParameterCodec).
      		Watch()
			},
		},
		// The types of objects this informer will return
		&E2ETestRunner{},
		// The resync period of this object. This will force a re-queue of all cached objects at this interval.
		// Every object will trigger the `Updatefunc` even if there have been no actual updates triggered.
		// In some cases you can set this to a very high interval - as you can assume you will see periodic updates in normal operation.
		// The interval is set low here for demo purposes.
		10*time.Second,
		// Callback Functions to trigger on add/update/delete
		cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
        glog.Info("AddFunc")
				if key, err := cache.MetaNamespaceKeyFunc(obj); err == nil {
					controller.queue.Add(key)
				}
			},
			UpdateFunc: func(old, new interface{}) {
        glog.Info("UpdateFunc")
				if key, err := cache.MetaNamespaceKeyFunc(new); err == nil {
					controller.queue.Add(key)
				}
			},
			DeleteFunc: func(obj interface{}) {
        glog.Info("DeleteFunc")
				if key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj); err == nil {
					controller.queue.Add(key)
				}
			},
		},
		cache.Indexers{},
	)

	controller.informer = informer
	// NodeLister avoids some boilerplate code (e.g. convert runtime.Object to *v1.node)
	controller.e2eTestLister = NewE2ETestRunnerLister(indexer)

	return controller
}

func (c *E2ETestController) Run(stopCh chan struct{}) {
	defer c.queue.ShutDown()
	glog.Info("Starting E2ETestController")

	go c.informer.Run(stopCh)

	// Wait for all caches to be synced, before processing items from the queue is started
	if !cache.WaitForCacheSync(stopCh, c.informer.HasSynced) {
		glog.Error(fmt.Errorf("Timed out waiting for caches to sync"))
		return
	}

	// Launching additional goroutines would parallelize workers consuming from the queue (but we don't really need this)
	go wait.Until(c.runWorker, time.Second, stopCh)

	<-stopCh
	glog.Info("Stopping E2ETestController Controller")
}

func (c *E2ETestController) runWorker() {
	for c.processNext() {
	}
}

func (c *E2ETestController) processNext() bool {
	// Wait until there is a new item in the working queue
	key, quit := c.queue.Get()
	if quit {
		return false
	}
	// Tell the queue that we are done with processing this key. This unblocks the key for other workers
	// This allows safe parallel processing because two pods with the same key are never processed in
	// parallel.
	defer c.queue.Done(key)
	// Invoke the method containing the business logic
	err := c.process(key.(string))
	// Handle the error if something went wrong during the execution of the business logic
	c.handleErr(err, key)
	return true
}

func (c *E2ETestController) process(key string) error {
	e2eTest, err := c.e2eTestLister.Get(key)
	if err != nil {
		return fmt.Errorf("failed to retrieve tests by key %q: %v", key, err)
	}

	glog.V(4).Infof("Received update of test: %s", e2eTest.GetName())
  return nil
}

func (c *E2ETestController) handleErr(err error, key interface{}) {
	if err == nil {
		// Forget about the #AddRateLimited history of the key on every successful synchronization.
		// This ensures that future processing of updates for this key is not delayed because of
		// an outdated error history.
		c.queue.Forget(key)
		return
	}

	// This controller retries 5 times if something goes wrong. After that, it stops trying.
	if c.queue.NumRequeues(key) < 5 {
		glog.Infof("Error processing node %v: %v", key, err)

		// Re-enqueue the key rate limited. Based on the rate limiter on the
		// queue and the re-enqueue history, the key will be processed later again.
		c.queue.AddRateLimited(key)
		return
	}

	c.queue.Forget(key)
	glog.Errorf("Dropping E2ETestRunner %q out of the queue: %v", key, err)
}
